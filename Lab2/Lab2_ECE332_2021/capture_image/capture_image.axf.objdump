
C:/JS/CNN-on-FPGA/Lab2/Lab2_ECE332_2021/capture_image/capture_image.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 80 0a 00 00 84 0a 00 00 88 0a 00 00     @...............
  30:	8c 0a 00 00 7c 0a 00 00 90 0a 00 00 94 0a 00 00     ....|...........

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb00024f 	bl	a18 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000b7c 	.word	0x00000b7c

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000fd0 	.word	0x00000fd0

00000124 <__cs3_heap_start_ptr>:
 124:	00001008 	.word	0x00001008

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000fd8 	.word	0x00000fd8
 170:	00000fdb 	.word	0x00000fdb
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000fd8 	.word	0x00000fd8
 1bc:	00000fd8 	.word	0x00000fd8
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000fd8 	.word	0x00000fd8
 200:	00000000 	.word	0x00000000
 204:	00000b20 	.word	0x00000b20

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000b20 	.word	0x00000b20
 250:	00000fdc 	.word	0x00000fdc
 254:	00000b80 	.word	0x00000b80
 258:	00000000 	.word	0x00000000

0000025c <captureVideo>:
		}
		DrawRectangle_filled(off_x, off_y, 50, 50, GREEN|RED);
	}
}

void captureVideo(){
 25c:	e92d0030 	push	{r4, r5}
	for (y = 0; y < 240; y++) {
 260:	e3003ff4 	movw	r3, #4084	; 0xff4
 264:	e3403000 	movt	r3, #0
 268:	e3a02000 	mov	r2, #0
 26c:	e5832000 	str	r2, [r3]
		for (x = 0; x < 320; x++) {
 270:	e1a02003 	mov	r2, r3
 274:	e3a05000 	mov	r5, #0
			short temp2 = *(Video_Mem_ptr + (y << 9) + x);
 278:	e300cb88 	movw	r12, #2952	; 0xb88
 27c:	e340c000 	movt	r12, #0
	}
}

void captureVideo(){
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 280:	e300413f 	movw	r4, #319	; 0x13f
 284:	e5825004 	str	r5, [r2, #4]
 288:	e1a03005 	mov	r3, r5
			short temp2 = *(Video_Mem_ptr + (y << 9) + x);
 28c:	e5921000 	ldr	r1, [r2]
 290:	e0833481 	add	r3, r3, r1, lsl #9
 294:	e1a03083 	lsl	r3, r3, #1
 298:	e59c1000 	ldr	r1, [r12]
 29c:	e19100b3 	ldrh	r0, [r1, r3]
			*(Video_Mem_ptr + (y << 9) + x) = temp2; //capture the current image in the buffer and store it in the buffer
 2a0:	e18100b3 	strh	r0, [r1, r3]
	}
}

void captureVideo(){
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 2a4:	e5923004 	ldr	r3, [r2, #4]
 2a8:	e2833001 	add	r3, r3, #1
 2ac:	e5823004 	str	r3, [r2, #4]
 2b0:	e1530004 	cmp	r3, r4
 2b4:	dafffff4 	ble	28c <captureVideo+0x30>
		DrawRectangle_filled(off_x, off_y, 50, 50, GREEN|RED);
	}
}

void captureVideo(){
	for (y = 0; y < 240; y++) {
 2b8:	e5923000 	ldr	r3, [r2]
 2bc:	e2833001 	add	r3, r3, #1
 2c0:	e5823000 	str	r3, [r2]
 2c4:	e35300ef 	cmp	r3, #239	; 0xef
 2c8:	daffffed 	ble	284 <captureVideo+0x28>
		for (x = 0; x < 320; x++) {
			short temp2 = *(Video_Mem_ptr + (y << 9) + x);
			*(Video_Mem_ptr + (y << 9) + x) = temp2; //capture the current image in the buffer and store it in the buffer
		}
	}	
}
 2cc:	e8bd0030 	pop	{r4, r5}
 2d0:	e12fff1e 	bx	lr

000002d4 <blackScreen>:

void blackScreen(){
 2d4:	e92d0030 	push	{r4, r5}
	*(Video_In_DMA_ptr + 3) = 0x0;
 2d8:	e3003b88 	movw	r3, #2952	; 0xb88
 2dc:	e3403000 	movt	r3, #0
 2e0:	e5933004 	ldr	r3, [r3, #4]
 2e4:	e3a02000 	mov	r2, #0
 2e8:	e583200c 	str	r2, [r3, #12]
	for (y = 0; y < 240; y++) {
 2ec:	e3003ff4 	movw	r3, #4084	; 0xff4
 2f0:	e3403000 	movt	r3, #0
 2f4:	e5832000 	str	r2, [r3]
		for (x = 0; x < 320; x++) {
 2f8:	e1a02003 	mov	r2, r3
 2fc:	e3a0c000 	mov	r12, #0
 300:	e1a0500c 	mov	r5, r12
			*(Video_Mem_ptr + (y << 9) + x) = BLACK; //make every pixel black
 304:	e3000b88 	movw	r0, #2952	; 0xb88
 308:	e3400000 	movt	r0, #0
}

void blackScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 30c:	e300413f 	movw	r4, #319	; 0x13f
 310:	e5825004 	str	r5, [r2, #4]
 314:	e1a03005 	mov	r3, r5
			*(Video_Mem_ptr + (y << 9) + x) = BLACK; //make every pixel black
 318:	e5921000 	ldr	r1, [r2]
 31c:	e0833481 	add	r3, r3, r1, lsl #9
 320:	e1a03083 	lsl	r3, r3, #1
 324:	e5901000 	ldr	r1, [r0]
 328:	e181c0b3 	strh	r12, [r1, r3]
}

void blackScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 32c:	e5923004 	ldr	r3, [r2, #4]
 330:	e2833001 	add	r3, r3, #1
 334:	e5823004 	str	r3, [r2, #4]
 338:	e1530004 	cmp	r3, r4
 33c:	dafffff5 	ble	318 <blackScreen+0x44>
	}	
}

void blackScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
 340:	e5923000 	ldr	r3, [r2]
 344:	e2833001 	add	r3, r3, #1
 348:	e5823000 	str	r3, [r2]
 34c:	e35300ef 	cmp	r3, #239	; 0xef
 350:	daffffee 	ble	310 <blackScreen+0x3c>
		for (x = 0; x < 320; x++) {
			*(Video_Mem_ptr + (y << 9) + x) = BLACK; //make every pixel black
		}
	}	
}
 354:	e8bd0030 	pop	{r4, r5}
 358:	e12fff1e 	bx	lr

0000035c <whiteScreen>:

void whiteScreen(){
 35c:	e92d0030 	push	{r4, r5}
	*(Video_In_DMA_ptr + 3) = 0x0;
 360:	e3003b88 	movw	r3, #2952	; 0xb88
 364:	e3403000 	movt	r3, #0
 368:	e5933004 	ldr	r3, [r3, #4]
 36c:	e3a02000 	mov	r2, #0
 370:	e583200c 	str	r2, [r3, #12]
	for (y = 0; y < 240; y++) {
 374:	e3003ff4 	movw	r3, #4084	; 0xff4
 378:	e3403000 	movt	r3, #0
 37c:	e5832000 	str	r2, [r3]
		for (x = 0; x < 320; x++) {
 380:	e1a02003 	mov	r2, r3
 384:	e3a05000 	mov	r5, #0
			*(Video_Mem_ptr + (y << 9) + x) = WHITE; //make every pixel black
 388:	e3000b88 	movw	r0, #2952	; 0xb88
 38c:	e3400000 	movt	r0, #0
 390:	e3e04000 	mvn	r4, #0
}

void whiteScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 394:	e300c13f 	movw	r12, #319	; 0x13f
 398:	e5825004 	str	r5, [r2, #4]
 39c:	e1a03005 	mov	r3, r5
			*(Video_Mem_ptr + (y << 9) + x) = WHITE; //make every pixel black
 3a0:	e5921000 	ldr	r1, [r2]
 3a4:	e0833481 	add	r3, r3, r1, lsl #9
 3a8:	e1a03083 	lsl	r3, r3, #1
 3ac:	e5901000 	ldr	r1, [r0]
 3b0:	e18140b3 	strh	r4, [r1, r3]
}

void whiteScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 3b4:	e5923004 	ldr	r3, [r2, #4]
 3b8:	e2833001 	add	r3, r3, #1
 3bc:	e5823004 	str	r3, [r2, #4]
 3c0:	e153000c 	cmp	r3, r12
 3c4:	dafffff5 	ble	3a0 <whiteScreen+0x44>
	}	
}

void whiteScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
 3c8:	e5923000 	ldr	r3, [r2]
 3cc:	e2833001 	add	r3, r3, #1
 3d0:	e5823000 	str	r3, [r2]
 3d4:	e35300ef 	cmp	r3, #239	; 0xef
 3d8:	daffffee 	ble	398 <whiteScreen+0x3c>
		for (x = 0; x < 320; x++) {
			*(Video_Mem_ptr + (y << 9) + x) = WHITE; //make every pixel black
		}
	}	
}
 3dc:	e8bd0030 	pop	{r4, r5}
 3e0:	e12fff1e 	bx	lr

000003e4 <RedScreen>:

void RedScreen(){
 3e4:	e92d0030 	push	{r4, r5}
	*(Video_In_DMA_ptr + 3) = 0x0;
 3e8:	e3003b88 	movw	r3, #2952	; 0xb88
 3ec:	e3403000 	movt	r3, #0
 3f0:	e5933004 	ldr	r3, [r3, #4]
 3f4:	e3a02000 	mov	r2, #0
 3f8:	e583200c 	str	r2, [r3, #12]
	for (y = 0; y < 240; y++) {
 3fc:	e3003ff4 	movw	r3, #4084	; 0xff4
 400:	e3403000 	movt	r3, #0
 404:	e5832000 	str	r2, [r3]
		for (x = 0; x < 320; x++) {
 408:	e1a02003 	mov	r2, r3
 40c:	e3a05000 	mov	r5, #0
			*(Video_Mem_ptr + (y << 9) + x) = RED; //make every pixel black
 410:	e3000b88 	movw	r0, #2952	; 0xb88
 414:	e3400000 	movt	r0, #0
 418:	e3a04a0f 	mov	r4, #61440	; 0xf000
}

void RedScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 41c:	e300c13f 	movw	r12, #319	; 0x13f
 420:	e5825004 	str	r5, [r2, #4]
 424:	e1a03005 	mov	r3, r5
			*(Video_Mem_ptr + (y << 9) + x) = RED; //make every pixel black
 428:	e5921000 	ldr	r1, [r2]
 42c:	e0833481 	add	r3, r3, r1, lsl #9
 430:	e1a03083 	lsl	r3, r3, #1
 434:	e5901000 	ldr	r1, [r0]
 438:	e18140b3 	strh	r4, [r1, r3]
}

void RedScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 43c:	e5923004 	ldr	r3, [r2, #4]
 440:	e2833001 	add	r3, r3, #1
 444:	e5823004 	str	r3, [r2, #4]
 448:	e153000c 	cmp	r3, r12
 44c:	dafffff5 	ble	428 <RedScreen+0x44>
	}	
}

void RedScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
 450:	e5923000 	ldr	r3, [r2]
 454:	e2833001 	add	r3, r3, #1
 458:	e5823000 	str	r3, [r2]
 45c:	e35300ef 	cmp	r3, #239	; 0xef
 460:	daffffee 	ble	420 <RedScreen+0x3c>
		for (x = 0; x < 320; x++) {
			*(Video_Mem_ptr + (y << 9) + x) = RED; //make every pixel black
		}
	}	
}
 464:	e8bd0030 	pop	{r4, r5}
 468:	e12fff1e 	bx	lr

0000046c <BlueScreen>:

void BlueScreen(){
 46c:	e92d0030 	push	{r4, r5}
	*(Video_In_DMA_ptr + 3) = 0x0;
 470:	e3003b88 	movw	r3, #2952	; 0xb88
 474:	e3403000 	movt	r3, #0
 478:	e5933004 	ldr	r3, [r3, #4]
 47c:	e3a02000 	mov	r2, #0
 480:	e583200c 	str	r2, [r3, #12]
	for (y = 0; y < 240; y++) {
 484:	e3003ff4 	movw	r3, #4084	; 0xff4
 488:	e3403000 	movt	r3, #0
 48c:	e5832000 	str	r2, [r3]
		for (x = 0; x < 320; x++) {
 490:	e1a02003 	mov	r2, r3
 494:	e3a05000 	mov	r5, #0
			*(Video_Mem_ptr + (y << 9) + x) = BLUE; //make every pixel black
 498:	e3000b88 	movw	r0, #2952	; 0xb88
 49c:	e3400000 	movt	r0, #0
 4a0:	e3a040ff 	mov	r4, #255	; 0xff
}

void BlueScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 4a4:	e300c13f 	movw	r12, #319	; 0x13f
 4a8:	e5825004 	str	r5, [r2, #4]
 4ac:	e1a03005 	mov	r3, r5
			*(Video_Mem_ptr + (y << 9) + x) = BLUE; //make every pixel black
 4b0:	e5921000 	ldr	r1, [r2]
 4b4:	e0833481 	add	r3, r3, r1, lsl #9
 4b8:	e1a03083 	lsl	r3, r3, #1
 4bc:	e5901000 	ldr	r1, [r0]
 4c0:	e18140b3 	strh	r4, [r1, r3]
}

void BlueScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 4c4:	e5923004 	ldr	r3, [r2, #4]
 4c8:	e2833001 	add	r3, r3, #1
 4cc:	e5823004 	str	r3, [r2, #4]
 4d0:	e153000c 	cmp	r3, r12
 4d4:	dafffff5 	ble	4b0 <BlueScreen+0x44>
	}	
}

void BlueScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
 4d8:	e5923000 	ldr	r3, [r2]
 4dc:	e2833001 	add	r3, r3, #1
 4e0:	e5823000 	str	r3, [r2]
 4e4:	e35300ef 	cmp	r3, #239	; 0xef
 4e8:	daffffee 	ble	4a8 <BlueScreen+0x3c>
		for (x = 0; x < 320; x++) {
			*(Video_Mem_ptr + (y << 9) + x) = BLUE; //make every pixel black
		}
	}	
}
 4ec:	e8bd0030 	pop	{r4, r5}
 4f0:	e12fff1e 	bx	lr

000004f4 <GreenScreen>:

void GreenScreen(){
 4f4:	e92d0030 	push	{r4, r5}
	*(Video_In_DMA_ptr + 3) = 0x0;
 4f8:	e3003b88 	movw	r3, #2952	; 0xb88
 4fc:	e3403000 	movt	r3, #0
 500:	e5933004 	ldr	r3, [r3, #4]
 504:	e3a02000 	mov	r2, #0
 508:	e583200c 	str	r2, [r3, #12]
	for (y = 0; y < 240; y++) {
 50c:	e3003ff4 	movw	r3, #4084	; 0xff4
 510:	e3403000 	movt	r3, #0
 514:	e5832000 	str	r2, [r3]
		for (x = 0; x < 320; x++) {
 518:	e1a02003 	mov	r2, r3
 51c:	e3a05000 	mov	r5, #0
			*(Video_Mem_ptr + (y << 9) + x) = GREEN; //make every pixel black
 520:	e3000b88 	movw	r0, #2952	; 0xb88
 524:	e3400000 	movt	r0, #0
 528:	e3a04c0f 	mov	r4, #3840	; 0xf00
}

void GreenScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 52c:	e300c13f 	movw	r12, #319	; 0x13f
 530:	e5825004 	str	r5, [r2, #4]
 534:	e1a03005 	mov	r3, r5
			*(Video_Mem_ptr + (y << 9) + x) = GREEN; //make every pixel black
 538:	e5921000 	ldr	r1, [r2]
 53c:	e0833481 	add	r3, r3, r1, lsl #9
 540:	e1a03083 	lsl	r3, r3, #1
 544:	e5901000 	ldr	r1, [r0]
 548:	e18140b3 	strh	r4, [r1, r3]
}

void GreenScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 54c:	e5923004 	ldr	r3, [r2, #4]
 550:	e2833001 	add	r3, r3, #1
 554:	e5823004 	str	r3, [r2, #4]
 558:	e153000c 	cmp	r3, r12
 55c:	dafffff5 	ble	538 <GreenScreen+0x44>
	}	
}

void GreenScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
 560:	e5923000 	ldr	r3, [r2]
 564:	e2833001 	add	r3, r3, #1
 568:	e5823000 	str	r3, [r2]
 56c:	e35300ef 	cmp	r3, #239	; 0xef
 570:	daffffee 	ble	530 <GreenScreen+0x3c>
		for (x = 0; x < 320; x++) {
			*(Video_Mem_ptr + (y << 9) + x) = GREEN; //make every pixel black
		}
	}	
}
 574:	e8bd0030 	pop	{r4, r5}
 578:	e12fff1e 	bx	lr

0000057c <DrawRectangle_filled>:

void DrawRectangle_filled(int off_x, int off_y, int size_x, int size_y, int color){
 57c:	e92d0070 	push	{r4, r5, r6}
	if(320 <= (off_x + size_x)) off_x = 320 - size_x;
 580:	e080c002 	add	r12, r0, r2
 584:	e35c0d05 	cmp	r12, #320	; 0x140
 588:	a2620d05 	rsbge	r0, r2, #320	; 0x140
 58c:	e1c05fc0 	bic	r5, r0, r0, asr #31
	if(off_x <= 0 ) off_x = 0;
	if(240 <= (off_y + size_y)) off_y = 240 - size_y;
 590:	e0810003 	add	r0, r1, r3
 594:	e35000ef 	cmp	r0, #239	; 0xef
 598:	c26310f0 	rsbgt	r1, r3, #240	; 0xf0
 59c:	e1c11fc1 	bic	r1, r1, r1, asr #31
	if(off_y <= 0 ) off_y = 0;

	for (y = off_y; y < off_y + size_y; y++) {
 5a0:	e300cff4 	movw	r12, #4084	; 0xff4
 5a4:	e340c000 	movt	r12, #0
 5a8:	e58c1000 	str	r1, [r12]
 5ac:	e0836001 	add	r6, r3, r1
 5b0:	e1560001 	cmp	r6, r1
 5b4:	da000017 	ble	618 <DrawRectangle_filled+0x9c>
		for (x = off_x; x < off_x + size_x; x++) {
 5b8:	e1a0100c 	mov	r1, r12
 5bc:	e0820005 	add	r0, r2, r5
			*(Video_Mem_ptr + (y << 9) + x) = color; //make every pixel black
 5c0:	e300cb88 	movw	r12, #2952	; 0xb88
 5c4:	e340c000 	movt	r12, #0
 5c8:	e1dd40bc 	ldrh	r4, [sp, #12]
	if(off_x <= 0 ) off_x = 0;
	if(240 <= (off_y + size_y)) off_y = 240 - size_y;
	if(off_y <= 0 ) off_y = 0;

	for (y = off_y; y < off_y + size_y; y++) {
		for (x = off_x; x < off_x + size_x; x++) {
 5cc:	e5815004 	str	r5, [r1, #4]
 5d0:	e1550000 	cmp	r5, r0
 5d4:	aa00000a 	bge	604 <DrawRectangle_filled+0x88>
 5d8:	e1a03005 	mov	r3, r5
			*(Video_Mem_ptr + (y << 9) + x) = color; //make every pixel black
 5dc:	e5912000 	ldr	r2, [r1]
 5e0:	e0833482 	add	r3, r3, r2, lsl #9
 5e4:	e1a03083 	lsl	r3, r3, #1
 5e8:	e59c2000 	ldr	r2, [r12]
 5ec:	e18240b3 	strh	r4, [r2, r3]
	if(off_x <= 0 ) off_x = 0;
	if(240 <= (off_y + size_y)) off_y = 240 - size_y;
	if(off_y <= 0 ) off_y = 0;

	for (y = off_y; y < off_y + size_y; y++) {
		for (x = off_x; x < off_x + size_x; x++) {
 5f0:	e5913004 	ldr	r3, [r1, #4]
 5f4:	e2833001 	add	r3, r3, #1
 5f8:	e5813004 	str	r3, [r1, #4]
 5fc:	e1530000 	cmp	r3, r0
 600:	bafffff5 	blt	5dc <DrawRectangle_filled+0x60>
	if(320 <= (off_x + size_x)) off_x = 320 - size_x;
	if(off_x <= 0 ) off_x = 0;
	if(240 <= (off_y + size_y)) off_y = 240 - size_y;
	if(off_y <= 0 ) off_y = 0;

	for (y = off_y; y < off_y + size_y; y++) {
 604:	e5913000 	ldr	r3, [r1]
 608:	e2833001 	add	r3, r3, #1
 60c:	e5813000 	str	r3, [r1]
 610:	e1560003 	cmp	r6, r3
 614:	caffffec 	bgt	5cc <DrawRectangle_filled+0x50>
		for (x = off_x; x < off_x + size_x; x++) {
			*(Video_Mem_ptr + (y << 9) + x) = color; //make every pixel black
		}
	}	
 618:	e8bd0070 	pop	{r4, r5, r6}
 61c:	e12fff1e 	bx	lr

00000620 <main>:
int bW=0; //0 if not b&w or has been already inverted backward 	1 if inverted forward
int key_value;
int off_x = 50;
int off_y = 50;

int main(void) {
 620:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 624:	e24dd008 	sub	sp, sp, #8
	while(1){
		*(Video_In_DMA_ptr + 3) = 0x4;
 628:	e3004b88 	movw	r4, #2952	; 0xb88
 62c:	e3404000 	movt	r4, #0
 630:	e3a07004 	mov	r7, #4
		if(*(KEY_ptr) != 0){
			key_value = *(KEY_ptr);
 634:	e3008ff4 	movw	r8, #4084	; 0xff4
 638:	e3408000 	movt	r8, #0
				case KEY3:		//KEY03
					off_x--;
					break;
			}
		}
		DrawRectangle_filled(off_x, off_y, 50, 50, GREEN|RED);
 63c:	e3a06cff 	mov	r6, #65280	; 0xff00
 640:	e3a05032 	mov	r5, #50	; 0x32
int off_x = 50;
int off_y = 50;

int main(void) {
	while(1){
		*(Video_In_DMA_ptr + 3) = 0x4;
 644:	e5943004 	ldr	r3, [r4, #4]
 648:	e583700c 	str	r7, [r3, #12]
		if(*(KEY_ptr) != 0){
 64c:	e5943008 	ldr	r3, [r4, #8]
 650:	e5932000 	ldr	r2, [r3]
 654:	e3520000 	cmp	r2, #0
 658:	0a00001c 	beq	6d0 <main+0xb0>
			key_value = *(KEY_ptr);
 65c:	e5933000 	ldr	r3, [r3]
 660:	e5883008 	str	r3, [r8, #8]
			switch (key_value) {
 664:	e2433001 	sub	r3, r3, #1
 668:	e3530007 	cmp	r3, #7
 66c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 670:	ea000016 	b	6d0 <main+0xb0>
 674:	00000694 	.word	0x00000694
 678:	000006a4 	.word	0x000006a4
 67c:	000006d0 	.word	0x000006d0
 680:	000006b4 	.word	0x000006b4
 684:	000006d0 	.word	0x000006d0
 688:	000006d0 	.word	0x000006d0
 68c:	000006d0 	.word	0x000006d0
 690:	000006c4 	.word	0x000006c4
				case KEY0:		//KEY00
					off_x++;
 694:	e594300c 	ldr	r3, [r4, #12]
 698:	e2833001 	add	r3, r3, #1
 69c:	e584300c 	str	r3, [r4, #12]
					break;
 6a0:	ea00000a 	b	6d0 <main+0xb0>
				case KEY1:		//KEY01
					off_y++;
 6a4:	e5943010 	ldr	r3, [r4, #16]
 6a8:	e2833001 	add	r3, r3, #1
 6ac:	e5843010 	str	r3, [r4, #16]
					break;
 6b0:	ea000006 	b	6d0 <main+0xb0>
				case KEY2:		//KEY02
					off_y--;
 6b4:	e5943010 	ldr	r3, [r4, #16]
 6b8:	e2433001 	sub	r3, r3, #1
 6bc:	e5843010 	str	r3, [r4, #16]
					break;
 6c0:	ea000002 	b	6d0 <main+0xb0>
				case KEY3:		//KEY03
					off_x--;
 6c4:	e594300c 	ldr	r3, [r4, #12]
 6c8:	e2433001 	sub	r3, r3, #1
 6cc:	e584300c 	str	r3, [r4, #12]
					break;
			}
		}
		DrawRectangle_filled(off_x, off_y, 50, 50, GREEN|RED);
 6d0:	e594000c 	ldr	r0, [r4, #12]
 6d4:	e5941010 	ldr	r1, [r4, #16]
 6d8:	e58d6000 	str	r6, [sp]
 6dc:	e1a02005 	mov	r2, r5
 6e0:	e1a03005 	mov	r3, r5
 6e4:	ebffffa4 	bl	57c <DrawRectangle_filled>
	}
 6e8:	eaffffd5 	b	644 <main+0x24>

000006ec <atexit>:
 6ec:	e1a01000 	mov	r1, r0
 6f0:	e3a00000 	mov	r0, #0
 6f4:	e92d4008 	push	{r3, lr}
 6f8:	e1a02000 	mov	r2, r0
 6fc:	e1a03000 	mov	r3, r0
 700:	eb00000e 	bl	740 <__register_exitproc>
 704:	e8bd4008 	pop	{r3, lr}
 708:	e12fff1e 	bx	lr

0000070c <exit>:
 70c:	e92d4008 	push	{r3, lr}
 710:	e3a01000 	mov	r1, #0
 714:	e1a04000 	mov	r4, r0
 718:	eb000045 	bl	834 <__call_exitprocs>
 71c:	e59f3018 	ldr	r3, [pc, #24]	; 73c <exit+0x30>
 720:	e5930000 	ldr	r0, [r3]
 724:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 728:	e3530000 	cmp	r3, #0
 72c:	11a0e00f 	movne	lr, pc
 730:	112fff13 	bxne	r3
 734:	e1a00004 	mov	r0, r4
 738:	eb0000c9 	bl	a64 <_exit>
 73c:	00000b24 	.word	0x00000b24

00000740 <__register_exitproc>:
 740:	e59fc0e4 	ldr	r12, [pc, #228]	; 82c <__register_exitproc+0xec>
 744:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 748:	e59c4000 	ldr	r4, [r12]
 74c:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 750:	e35c0000 	cmp	r12, #0
 754:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 758:	e59c5004 	ldr	r5, [r12, #4]
 75c:	0584c148 	streq	r12, [r4, #328]	; 0x148
 760:	e355001f 	cmp	r5, #31
 764:	e24dd010 	sub	sp, sp, #16
 768:	e1a06000 	mov	r6, r0
 76c:	da000015 	ble	7c8 <__register_exitproc+0x88>
 770:	e59f00b8 	ldr	r0, [pc, #184]	; 830 <__register_exitproc+0xf0>
 774:	e3500000 	cmp	r0, #0
 778:	1a000001 	bne	784 <__register_exitproc+0x44>
 77c:	e3e00000 	mvn	r0, #0
 780:	ea000018 	b	7e8 <__register_exitproc+0xa8>
 784:	e3a00e19 	mov	r0, #400	; 0x190
 788:	e58d100c 	str	r1, [sp, #12]
 78c:	e58d2008 	str	r2, [sp, #8]
 790:	e58d3004 	str	r3, [sp, #4]
 794:	e320f000 	nop	{0}
 798:	e250c000 	subs	r12, r0, #0
 79c:	e59d100c 	ldr	r1, [sp, #12]
 7a0:	e59d2008 	ldr	r2, [sp, #8]
 7a4:	e59d3004 	ldr	r3, [sp, #4]
 7a8:	0afffff3 	beq	77c <__register_exitproc+0x3c>
 7ac:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 7b0:	e3a00000 	mov	r0, #0
 7b4:	e58c0004 	str	r0, [r12, #4]
 7b8:	e58c5000 	str	r5, [r12]
 7bc:	e584c148 	str	r12, [r4, #328]	; 0x148
 7c0:	e58c0188 	str	r0, [r12, #392]	; 0x188
 7c4:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 7c8:	e3560000 	cmp	r6, #0
 7cc:	e59c4004 	ldr	r4, [r12, #4]
 7d0:	1a000007 	bne	7f4 <__register_exitproc+0xb4>
 7d4:	e2843002 	add	r3, r4, #2
 7d8:	e2844001 	add	r4, r4, #1
 7dc:	e78c1103 	str	r1, [r12, r3, lsl #2]
 7e0:	e58c4004 	str	r4, [r12, #4]
 7e4:	e3a00000 	mov	r0, #0
 7e8:	e28dd010 	add	sp, sp, #16
 7ec:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 7f0:	e12fff1e 	bx	lr
 7f4:	e3a00001 	mov	r0, #1
 7f8:	e1a00410 	lsl	r0, r0, r4
 7fc:	e08c8104 	add	r8, r12, r4, lsl #2
 800:	e3560002 	cmp	r6, #2
 804:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 808:	e5883108 	str	r3, [r8, #264]	; 0x108
 80c:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 810:	e1877000 	orr	r7, r7, r0
 814:	01830000 	orreq	r0, r3, r0
 818:	e1a05008 	mov	r5, r8
 81c:	e5882088 	str	r2, [r8, #136]	; 0x88
 820:	e58c7188 	str	r7, [r12, #392]	; 0x188
 824:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 828:	eaffffe9 	b	7d4 <__register_exitproc+0x94>
 82c:	00000b24 	.word	0x00000b24
 830:	00000000 	.word	0x00000000

00000834 <__call_exitprocs>:
 834:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 838:	e59f3168 	ldr	r3, [pc, #360]	; 9a8 <__call_exitprocs+0x174>
 83c:	e5933000 	ldr	r3, [r3]
 840:	e24dd014 	sub	sp, sp, #20
 844:	e58d3004 	str	r3, [sp, #4]
 848:	e2833f52 	add	r3, r3, #328	; 0x148
 84c:	e58d0008 	str	r0, [sp, #8]
 850:	e58d300c 	str	r3, [sp, #12]
 854:	e1a07001 	mov	r7, r1
 858:	e3a08001 	mov	r8, #1
 85c:	e59d3004 	ldr	r3, [sp, #4]
 860:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 864:	e3560000 	cmp	r6, #0
 868:	e59db00c 	ldr	r11, [sp, #12]
 86c:	0a000033 	beq	940 <__call_exitprocs+0x10c>
 870:	e5965004 	ldr	r5, [r6, #4]
 874:	e2554001 	subs	r4, r5, #1
 878:	5286a088 	addpl	r10, r6, #136	; 0x88
 87c:	5285501f 	addpl	r5, r5, #31
 880:	508a5105 	addpl	r5, r10, r5, lsl #2
 884:	5a000007 	bpl	8a8 <__call_exitprocs+0x74>
 888:	ea000029 	b	934 <__call_exitprocs+0x100>
 88c:	e5953000 	ldr	r3, [r5]
 890:	e1530007 	cmp	r3, r7
 894:	0a000005 	beq	8b0 <__call_exitprocs+0x7c>
 898:	e2444001 	sub	r4, r4, #1
 89c:	e3740001 	cmn	r4, #1
 8a0:	e2455004 	sub	r5, r5, #4
 8a4:	0a000022 	beq	934 <__call_exitprocs+0x100>
 8a8:	e3570000 	cmp	r7, #0
 8ac:	1afffff6 	bne	88c <__call_exitprocs+0x58>
 8b0:	e5963004 	ldr	r3, [r6, #4]
 8b4:	e06a2005 	rsb	r2, r10, r5
 8b8:	e2433001 	sub	r3, r3, #1
 8bc:	e0862002 	add	r2, r6, r2
 8c0:	e1530004 	cmp	r3, r4
 8c4:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 8c8:	13a01000 	movne	r1, #0
 8cc:	05864004 	streq	r4, [r6, #4]
 8d0:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 8d4:	e3530000 	cmp	r3, #0
 8d8:	0affffee 	beq	898 <__call_exitprocs+0x64>
 8dc:	e1a02418 	lsl	r2, r8, r4
 8e0:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 8e4:	e1120001 	tst	r2, r1
 8e8:	e5969004 	ldr	r9, [r6, #4]
 8ec:	0a000016 	beq	94c <__call_exitprocs+0x118>
 8f0:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 8f4:	e1120001 	tst	r2, r1
 8f8:	1a000016 	bne	958 <__call_exitprocs+0x124>
 8fc:	e59d0008 	ldr	r0, [sp, #8]
 900:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 904:	e1a0e00f 	mov	lr, pc
 908:	e12fff13 	bx	r3
 90c:	e5963004 	ldr	r3, [r6, #4]
 910:	e1530009 	cmp	r3, r9
 914:	1affffd0 	bne	85c <__call_exitprocs+0x28>
 918:	e59b3000 	ldr	r3, [r11]
 91c:	e1530006 	cmp	r3, r6
 920:	1affffcd 	bne	85c <__call_exitprocs+0x28>
 924:	e2444001 	sub	r4, r4, #1
 928:	e3740001 	cmn	r4, #1
 92c:	e2455004 	sub	r5, r5, #4
 930:	1affffdc 	bne	8a8 <__call_exitprocs+0x74>
 934:	e59f1070 	ldr	r1, [pc, #112]	; 9ac <__call_exitprocs+0x178>
 938:	e3510000 	cmp	r1, #0
 93c:	1a000009 	bne	968 <__call_exitprocs+0x134>
 940:	e28dd014 	add	sp, sp, #20
 944:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 948:	e12fff1e 	bx	lr
 94c:	e1a0e00f 	mov	lr, pc
 950:	e12fff13 	bx	r3
 954:	eaffffec 	b	90c <__call_exitprocs+0xd8>
 958:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 95c:	e1a0e00f 	mov	lr, pc
 960:	e12fff13 	bx	r3
 964:	eaffffe8 	b	90c <__call_exitprocs+0xd8>
 968:	e5963004 	ldr	r3, [r6, #4]
 96c:	e3530000 	cmp	r3, #0
 970:	e5963000 	ldr	r3, [r6]
 974:	1a000008 	bne	99c <__call_exitprocs+0x168>
 978:	e3530000 	cmp	r3, #0
 97c:	0a000006 	beq	99c <__call_exitprocs+0x168>
 980:	e1a00006 	mov	r0, r6
 984:	e58b3000 	str	r3, [r11]
 988:	e320f000 	nop	{0}
 98c:	e59b6000 	ldr	r6, [r11]
 990:	e3560000 	cmp	r6, #0
 994:	1affffb5 	bne	870 <__call_exitprocs+0x3c>
 998:	eaffffe8 	b	940 <__call_exitprocs+0x10c>
 99c:	e1a0b006 	mov	r11, r6
 9a0:	e1a06003 	mov	r6, r3
 9a4:	eafffff9 	b	990 <__call_exitprocs+0x15c>
 9a8:	00000b24 	.word	0x00000b24
 9ac:	00000000 	.word	0x00000000

000009b0 <register_fini>:
 9b0:	e92d4008 	push	{r3, lr}
 9b4:	e59f3010 	ldr	r3, [pc, #16]	; 9cc <register_fini+0x1c>
 9b8:	e3530000 	cmp	r3, #0
 9bc:	159f000c 	ldrne	r0, [pc, #12]	; 9d0 <register_fini+0x20>
 9c0:	1bffff49 	blne	6ec <atexit>
 9c4:	e8bd4008 	pop	{r3, lr}
 9c8:	e12fff1e 	bx	lr
 9cc:	00000b4c 	.word	0x00000b4c
 9d0:	000009d4 	.word	0x000009d4

000009d4 <__libc_fini_array>:
 9d4:	e92d4038 	push	{r3, r4, r5, lr}
 9d8:	e59f5030 	ldr	r5, [pc, #48]	; a10 <__libc_fini_array+0x3c>
 9dc:	e59f4030 	ldr	r4, [pc, #48]	; a14 <__libc_fini_array+0x40>
 9e0:	e0654004 	rsb	r4, r5, r4
 9e4:	e1b04144 	asrs	r4, r4, #2
 9e8:	10855104 	addne	r5, r5, r4, lsl #2
 9ec:	0a000004 	beq	a04 <__libc_fini_array+0x30>
 9f0:	e5353004 	ldr	r3, [r5, #-4]!
 9f4:	e1a0e00f 	mov	lr, pc
 9f8:	e12fff13 	bx	r3
 9fc:	e2544001 	subs	r4, r4, #1
 a00:	1afffffa 	bne	9f0 <__libc_fini_array+0x1c>
 a04:	eb000050 	bl	b4c <__libc_fini>
 a08:	e8bd4038 	pop	{r3, r4, r5, lr}
 a0c:	e12fff1e 	bx	lr
 a10:	00000b64 	.word	0x00000b64
 a14:	00000b68 	.word	0x00000b68

00000a18 <__cs3_premain>:
 a18:	e92d4008 	push	{r3, lr}
 a1c:	eb00001d 	bl	a98 <__libc_init_array>
 a20:	e59f3030 	ldr	r3, [pc, #48]	; a58 <__cs3_premain+0x40>
 a24:	e3530000 	cmp	r3, #0
 a28:	15930000 	ldrne	r0, [r3]
 a2c:	01a00003 	moveq	r0, r3
 a30:	e59f3024 	ldr	r3, [pc, #36]	; a5c <__cs3_premain+0x44>
 a34:	e3530000 	cmp	r3, #0
 a38:	15931000 	ldrne	r1, [r3]
 a3c:	01a01003 	moveq	r1, r3
 a40:	e3a02000 	mov	r2, #0
 a44:	ebfffef5 	bl	620 <main>
 a48:	e59f3010 	ldr	r3, [pc, #16]	; a60 <__cs3_premain+0x48>
 a4c:	e3530000 	cmp	r3, #0
 a50:	1bffff2d 	blne	70c <exit>
 a54:	eafffffe 	b	a54 <__cs3_premain+0x3c>
	...
 a60:	0000070c 	.word	0x0000070c

00000a64 <_exit>:
 a64:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 a68:	e3a00018 	mov	r0, #24
 a6c:	e59f1004 	ldr	r1, [pc, #4]	; a78 <_exit+0x14>
 a70:	ef123456 	svc	0x00123456
 a74:	eafffffe 	b	a74 <_exit+0x10>
 a78:	00020026 	.word	0x00020026

00000a7c <__cs3_isr_interrupt>:
 a7c:	eafffffe 	b	a7c <__cs3_isr_interrupt>

00000a80 <__cs3_isr_undef>:
 a80:	eafffffe 	b	a80 <__cs3_isr_undef>

00000a84 <__cs3_isr_swi>:
 a84:	eafffffe 	b	a84 <__cs3_isr_swi>

00000a88 <__cs3_isr_pabort>:
 a88:	eafffffe 	b	a88 <__cs3_isr_pabort>

00000a8c <__cs3_isr_dabort>:
 a8c:	eafffffe 	b	a8c <__cs3_isr_dabort>

00000a90 <__cs3_isr_irq>:
 a90:	eafffffe 	b	a90 <__cs3_isr_irq>

00000a94 <__cs3_isr_fiq>:
 a94:	eafffffe 	b	a94 <__cs3_isr_fiq>

00000a98 <__libc_init_array>:
 a98:	e92d4070 	push	{r4, r5, r6, lr}
 a9c:	e59f506c 	ldr	r5, [pc, #108]	; b10 <__libc_init_array+0x78>
 aa0:	e59f606c 	ldr	r6, [pc, #108]	; b14 <__libc_init_array+0x7c>
 aa4:	e0656006 	rsb	r6, r5, r6
 aa8:	e1b06146 	asrs	r6, r6, #2
 aac:	12455004 	subne	r5, r5, #4
 ab0:	13a04000 	movne	r4, #0
 ab4:	0a000005 	beq	ad0 <__libc_init_array+0x38>
 ab8:	e5b53004 	ldr	r3, [r5, #4]!
 abc:	e2844001 	add	r4, r4, #1
 ac0:	e1a0e00f 	mov	lr, pc
 ac4:	e12fff13 	bx	r3
 ac8:	e1560004 	cmp	r6, r4
 acc:	1afffff9 	bne	ab8 <__libc_init_array+0x20>
 ad0:	e59f5040 	ldr	r5, [pc, #64]	; b18 <__libc_init_array+0x80>
 ad4:	e59f6040 	ldr	r6, [pc, #64]	; b1c <__libc_init_array+0x84>
 ad8:	e0656006 	rsb	r6, r5, r6
 adc:	eb000012 	bl	b2c <_init>
 ae0:	e1b06146 	asrs	r6, r6, #2
 ae4:	12455004 	subne	r5, r5, #4
 ae8:	13a04000 	movne	r4, #0
 aec:	0a000005 	beq	b08 <__libc_init_array+0x70>
 af0:	e5b53004 	ldr	r3, [r5, #4]!
 af4:	e2844001 	add	r4, r4, #1
 af8:	e1a0e00f 	mov	lr, pc
 afc:	e12fff13 	bx	r3
 b00:	e1560004 	cmp	r6, r4
 b04:	1afffff9 	bne	af0 <__libc_init_array+0x58>
 b08:	e8bd4070 	pop	{r4, r5, r6, lr}
 b0c:	e12fff1e 	bx	lr
 b10:	00000b44 	.word	0x00000b44
 b14:	00000b44 	.word	0x00000b44
 b18:	00000b44 	.word	0x00000b44
 b1c:	00000b4c 	.word	0x00000b4c

Disassembly of section .rodata:

00000b24 <_global_impure_ptr>:
 b24:	00000ba8 00000043                       ....C...

00000b2c <_init>:
 b2c:	e1a0c00d 	mov	r12, sp
 b30:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 b34:	e24cb004 	sub	r11, r12, #4
 b38:	e24bd028 	sub	sp, r11, #40	; 0x28
 b3c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 b40:	e12fff1e 	bx	lr

00000b44 <__init_array_start>:
 b44:	000009b0 	.word	0x000009b0

00000b48 <__frame_dummy_init_array_entry>:
 b48:	00000208                                ....

00000b4c <__libc_fini>:
 b4c:	e1a0c00d 	mov	r12, sp
 b50:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 b54:	e24cb004 	sub	r11, r12, #4
 b58:	e24bd028 	sub	sp, r11, #40	; 0x28
 b5c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 b60:	e12fff1e 	bx	lr

00000b64 <__fini_array_start>:
 b64:	000001c4 	.word	0x000001c4

00000b68 <__cs3_regions>:
	...
 b74:	00000fd8 	.word	0x00000fd8
 b78:	00000030 	.word	0x00000030

00000b7c <__cs3_regions_end>:
 b7c:	00000000 	.word	0x00000000
