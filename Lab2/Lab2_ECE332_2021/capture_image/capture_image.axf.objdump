
C:/JS/CNN-on-FPGA/Lab2/Lab2_ECE332_2021/capture_image/capture_image.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 20 09 00 00 24 09 00 00 28 09 00 00     @... ...$...(...
  30:	2c 09 00 00 1c 09 00 00 30 09 00 00 34 09 00 00     ,.......0...4...

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0001f7 	bl	8b8 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000a1c 	.word	0x00000a1c

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000e68 	.word	0x00000e68

00000124 <__cs3_heap_start_ptr>:
 124:	00000e98 	.word	0x00000e98

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000e70 	.word	0x00000e70
 170:	00000e73 	.word	0x00000e73
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000e70 	.word	0x00000e70
 1bc:	00000e70 	.word	0x00000e70
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000e70 	.word	0x00000e70
 200:	00000000 	.word	0x00000000
 204:	000009c0 	.word	0x000009c0

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	000009c0 	.word	0x000009c0
 250:	00000e74 	.word	0x00000e74
 254:	00000a20 	.word	0x00000a20
 258:	00000000 	.word	0x00000000

0000025c <captureVideo>:
			GreenScreen();
		}
	}
}

void captureVideo(){
 25c:	e92d0030 	push	{r4, r5}
	for (y = 0; y < 240; y++) {
 260:	e3003e8c 	movw	r3, #3724	; 0xe8c
 264:	e3403000 	movt	r3, #0
 268:	e3a02000 	mov	r2, #0
 26c:	e5832000 	str	r2, [r3]
		for (x = 0; x < 320; x++) {
 270:	e1a02003 	mov	r2, r3
 274:	e3a05000 	mov	r5, #0
			short temp2 = *(Video_Mem_ptr + (y << 9) + x);
 278:	e300ca28 	movw	r12, #2600	; 0xa28
 27c:	e340c000 	movt	r12, #0
	}
}

void captureVideo(){
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 280:	e300413f 	movw	r4, #319	; 0x13f
 284:	e5825004 	str	r5, [r2, #4]
 288:	e1a03005 	mov	r3, r5
			short temp2 = *(Video_Mem_ptr + (y << 9) + x);
 28c:	e5921000 	ldr	r1, [r2]
 290:	e0833481 	add	r3, r3, r1, lsl #9
 294:	e1a03083 	lsl	r3, r3, #1
 298:	e59c1000 	ldr	r1, [r12]
 29c:	e19100b3 	ldrh	r0, [r1, r3]
			*(Video_Mem_ptr + (y << 9) + x) = temp2; //capture the current image in the buffer and store it in the buffer
 2a0:	e18100b3 	strh	r0, [r1, r3]
	}
}

void captureVideo(){
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 2a4:	e5923004 	ldr	r3, [r2, #4]
 2a8:	e2833001 	add	r3, r3, #1
 2ac:	e5823004 	str	r3, [r2, #4]
 2b0:	e1530004 	cmp	r3, r4
 2b4:	dafffff4 	ble	28c <captureVideo+0x30>
		}
	}
}

void captureVideo(){
	for (y = 0; y < 240; y++) {
 2b8:	e5923000 	ldr	r3, [r2]
 2bc:	e2833001 	add	r3, r3, #1
 2c0:	e5823000 	str	r3, [r2]
 2c4:	e35300ef 	cmp	r3, #239	; 0xef
 2c8:	daffffed 	ble	284 <captureVideo+0x28>
		for (x = 0; x < 320; x++) {
			short temp2 = *(Video_Mem_ptr + (y << 9) + x);
			*(Video_Mem_ptr + (y << 9) + x) = temp2; //capture the current image in the buffer and store it in the buffer
		}
	}	
}
 2cc:	e8bd0030 	pop	{r4, r5}
 2d0:	e12fff1e 	bx	lr

000002d4 <blackScreen>:

void blackScreen(){
 2d4:	e92d0030 	push	{r4, r5}
	for (y = 0; y < 240; y++) {
 2d8:	e3003e8c 	movw	r3, #3724	; 0xe8c
 2dc:	e3403000 	movt	r3, #0
 2e0:	e3a02000 	mov	r2, #0
 2e4:	e5832000 	str	r2, [r3]
		for (x = 0; x < 320; x++) {
 2e8:	e1a02003 	mov	r2, r3
 2ec:	e3a0c000 	mov	r12, #0
 2f0:	e1a0500c 	mov	r5, r12
			*(Video_Mem_ptr + (y << 9) + x) = BLACK; //make every pixel black
 2f4:	e3000a28 	movw	r0, #2600	; 0xa28
 2f8:	e3400000 	movt	r0, #0
	}	
}

void blackScreen(){
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 2fc:	e300413f 	movw	r4, #319	; 0x13f
 300:	e5825004 	str	r5, [r2, #4]
 304:	e1a03005 	mov	r3, r5
			*(Video_Mem_ptr + (y << 9) + x) = BLACK; //make every pixel black
 308:	e5921000 	ldr	r1, [r2]
 30c:	e0833481 	add	r3, r3, r1, lsl #9
 310:	e1a03083 	lsl	r3, r3, #1
 314:	e5901000 	ldr	r1, [r0]
 318:	e181c0b3 	strh	r12, [r1, r3]
	}	
}

void blackScreen(){
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 31c:	e5923004 	ldr	r3, [r2, #4]
 320:	e2833001 	add	r3, r3, #1
 324:	e5823004 	str	r3, [r2, #4]
 328:	e1530004 	cmp	r3, r4
 32c:	dafffff5 	ble	308 <blackScreen+0x34>
		}
	}	
}

void blackScreen(){
	for (y = 0; y < 240; y++) {
 330:	e5923000 	ldr	r3, [r2]
 334:	e2833001 	add	r3, r3, #1
 338:	e5823000 	str	r3, [r2]
 33c:	e35300ef 	cmp	r3, #239	; 0xef
 340:	daffffee 	ble	300 <blackScreen+0x2c>
		for (x = 0; x < 320; x++) {
			*(Video_Mem_ptr + (y << 9) + x) = BLACK; //make every pixel black
		}
	}	
}
 344:	e8bd0030 	pop	{r4, r5}
 348:	e12fff1e 	bx	lr

0000034c <whiteScreen>:

void whiteScreen(){
 34c:	e92d0030 	push	{r4, r5}
	for (y = 0; y < 240; y++) {
 350:	e3003e8c 	movw	r3, #3724	; 0xe8c
 354:	e3403000 	movt	r3, #0
 358:	e3a02000 	mov	r2, #0
 35c:	e5832000 	str	r2, [r3]
		for (x = 0; x < 320; x++) {
 360:	e1a02003 	mov	r2, r3
 364:	e3a05000 	mov	r5, #0
			*(Video_Mem_ptr + (y << 9) + x) = GREEN; //make every pixel black
 368:	e3000a28 	movw	r0, #2600	; 0xa28
 36c:	e3400000 	movt	r0, #0
 370:	e3a04c0f 	mov	r4, #3840	; 0xf00
	}	
}

void whiteScreen(){
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 374:	e300c13f 	movw	r12, #319	; 0x13f
 378:	e5825004 	str	r5, [r2, #4]
 37c:	e1a03005 	mov	r3, r5
			*(Video_Mem_ptr + (y << 9) + x) = GREEN; //make every pixel black
 380:	e5921000 	ldr	r1, [r2]
 384:	e0833481 	add	r3, r3, r1, lsl #9
 388:	e1a03083 	lsl	r3, r3, #1
 38c:	e5901000 	ldr	r1, [r0]
 390:	e18140b3 	strh	r4, [r1, r3]
	}	
}

void whiteScreen(){
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 394:	e5923004 	ldr	r3, [r2, #4]
 398:	e2833001 	add	r3, r3, #1
 39c:	e5823004 	str	r3, [r2, #4]
 3a0:	e153000c 	cmp	r3, r12
 3a4:	dafffff5 	ble	380 <whiteScreen+0x34>
		}
	}	
}

void whiteScreen(){
	for (y = 0; y < 240; y++) {
 3a8:	e5923000 	ldr	r3, [r2]
 3ac:	e2833001 	add	r3, r3, #1
 3b0:	e5823000 	str	r3, [r2]
 3b4:	e35300ef 	cmp	r3, #239	; 0xef
 3b8:	daffffee 	ble	378 <whiteScreen+0x2c>
		for (x = 0; x < 320; x++) {
			*(Video_Mem_ptr + (y << 9) + x) = GREEN; //make every pixel black
		}
	}	
}
 3bc:	e8bd0030 	pop	{r4, r5}
 3c0:	e12fff1e 	bx	lr

000003c4 <RedScreen>:

void RedScreen(){
 3c4:	e92d0030 	push	{r4, r5}
	*(Video_In_DMA_ptr + 3) = 0x0;
 3c8:	e3003a28 	movw	r3, #2600	; 0xa28
 3cc:	e3403000 	movt	r3, #0
 3d0:	e5933004 	ldr	r3, [r3, #4]
 3d4:	e3a02000 	mov	r2, #0
 3d8:	e583200c 	str	r2, [r3, #12]
	for (y = 0; y < 240; y++) {
 3dc:	e3003e8c 	movw	r3, #3724	; 0xe8c
 3e0:	e3403000 	movt	r3, #0
 3e4:	e5832000 	str	r2, [r3]
		for (x = 0; x < 320; x++) {
 3e8:	e1a02003 	mov	r2, r3
 3ec:	e3a05000 	mov	r5, #0
			*(Video_Mem_ptr + (y << 9) + x) = RED; //make every pixel black
 3f0:	e3000a28 	movw	r0, #2600	; 0xa28
 3f4:	e3400000 	movt	r0, #0
 3f8:	e3a04a0f 	mov	r4, #61440	; 0xf000
}

void RedScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 3fc:	e300c13f 	movw	r12, #319	; 0x13f
 400:	e5825004 	str	r5, [r2, #4]
 404:	e1a03005 	mov	r3, r5
			*(Video_Mem_ptr + (y << 9) + x) = RED; //make every pixel black
 408:	e5921000 	ldr	r1, [r2]
 40c:	e0833481 	add	r3, r3, r1, lsl #9
 410:	e1a03083 	lsl	r3, r3, #1
 414:	e5901000 	ldr	r1, [r0]
 418:	e18140b3 	strh	r4, [r1, r3]
}

void RedScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 41c:	e5923004 	ldr	r3, [r2, #4]
 420:	e2833001 	add	r3, r3, #1
 424:	e5823004 	str	r3, [r2, #4]
 428:	e153000c 	cmp	r3, r12
 42c:	dafffff5 	ble	408 <RedScreen+0x44>
	}	
}

void RedScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
 430:	e5923000 	ldr	r3, [r2]
 434:	e2833001 	add	r3, r3, #1
 438:	e5823000 	str	r3, [r2]
 43c:	e35300ef 	cmp	r3, #239	; 0xef
 440:	daffffee 	ble	400 <RedScreen+0x3c>
		for (x = 0; x < 320; x++) {
			*(Video_Mem_ptr + (y << 9) + x) = RED; //make every pixel black
		}
	}	
}
 444:	e8bd0030 	pop	{r4, r5}
 448:	e12fff1e 	bx	lr

0000044c <BlueScreen>:

void BlueScreen(){
 44c:	e92d0030 	push	{r4, r5}
	*(Video_In_DMA_ptr + 3) = 0x0;
 450:	e3003a28 	movw	r3, #2600	; 0xa28
 454:	e3403000 	movt	r3, #0
 458:	e5933004 	ldr	r3, [r3, #4]
 45c:	e3a02000 	mov	r2, #0
 460:	e583200c 	str	r2, [r3, #12]
	for (y = 0; y < 240; y++) {
 464:	e3003e8c 	movw	r3, #3724	; 0xe8c
 468:	e3403000 	movt	r3, #0
 46c:	e5832000 	str	r2, [r3]
		for (x = 0; x < 320; x++) {
 470:	e1a02003 	mov	r2, r3
 474:	e3a05000 	mov	r5, #0
			*(Video_Mem_ptr + (y << 9) + x) = BLUE; //make every pixel black
 478:	e3000a28 	movw	r0, #2600	; 0xa28
 47c:	e3400000 	movt	r0, #0
 480:	e3a040f0 	mov	r4, #240	; 0xf0
}

void BlueScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 484:	e300c13f 	movw	r12, #319	; 0x13f
 488:	e5825004 	str	r5, [r2, #4]
 48c:	e1a03005 	mov	r3, r5
			*(Video_Mem_ptr + (y << 9) + x) = BLUE; //make every pixel black
 490:	e5921000 	ldr	r1, [r2]
 494:	e0833481 	add	r3, r3, r1, lsl #9
 498:	e1a03083 	lsl	r3, r3, #1
 49c:	e5901000 	ldr	r1, [r0]
 4a0:	e18140b3 	strh	r4, [r1, r3]
}

void BlueScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 4a4:	e5923004 	ldr	r3, [r2, #4]
 4a8:	e2833001 	add	r3, r3, #1
 4ac:	e5823004 	str	r3, [r2, #4]
 4b0:	e153000c 	cmp	r3, r12
 4b4:	dafffff5 	ble	490 <BlueScreen+0x44>
	}	
}

void BlueScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
 4b8:	e5923000 	ldr	r3, [r2]
 4bc:	e2833001 	add	r3, r3, #1
 4c0:	e5823000 	str	r3, [r2]
 4c4:	e35300ef 	cmp	r3, #239	; 0xef
 4c8:	daffffee 	ble	488 <BlueScreen+0x3c>
		for (x = 0; x < 320; x++) {
			*(Video_Mem_ptr + (y << 9) + x) = BLUE; //make every pixel black
		}
	}	
}
 4cc:	e8bd0030 	pop	{r4, r5}
 4d0:	e12fff1e 	bx	lr

000004d4 <GreenScreen>:

void GreenScreen(){
 4d4:	e92d0030 	push	{r4, r5}
	*(Video_In_DMA_ptr + 3) = 0x0;
 4d8:	e3003a28 	movw	r3, #2600	; 0xa28
 4dc:	e3403000 	movt	r3, #0
 4e0:	e5933004 	ldr	r3, [r3, #4]
 4e4:	e3a02000 	mov	r2, #0
 4e8:	e583200c 	str	r2, [r3, #12]
	for (y = 0; y < 240; y++) {
 4ec:	e3003e8c 	movw	r3, #3724	; 0xe8c
 4f0:	e3403000 	movt	r3, #0
 4f4:	e5832000 	str	r2, [r3]
		for (x = 0; x < 320; x++) {
 4f8:	e1a02003 	mov	r2, r3
 4fc:	e3a05000 	mov	r5, #0
			*(Video_Mem_ptr + (y << 9) + x) = GREEN; //make every pixel black
 500:	e3000a28 	movw	r0, #2600	; 0xa28
 504:	e3400000 	movt	r0, #0
 508:	e3a04c0f 	mov	r4, #3840	; 0xf00
}

void GreenScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 50c:	e300c13f 	movw	r12, #319	; 0x13f
 510:	e5825004 	str	r5, [r2, #4]
 514:	e1a03005 	mov	r3, r5
			*(Video_Mem_ptr + (y << 9) + x) = GREEN; //make every pixel black
 518:	e5921000 	ldr	r1, [r2]
 51c:	e0833481 	add	r3, r3, r1, lsl #9
 520:	e1a03083 	lsl	r3, r3, #1
 524:	e5901000 	ldr	r1, [r0]
 528:	e18140b3 	strh	r4, [r1, r3]
}

void GreenScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
		for (x = 0; x < 320; x++) {
 52c:	e5923004 	ldr	r3, [r2, #4]
 530:	e2833001 	add	r3, r3, #1
 534:	e5823004 	str	r3, [r2, #4]
 538:	e153000c 	cmp	r3, r12
 53c:	dafffff5 	ble	518 <GreenScreen+0x44>
	}	
}

void GreenScreen(){
	*(Video_In_DMA_ptr + 3) = 0x0;
	for (y = 0; y < 240; y++) {
 540:	e5923000 	ldr	r3, [r2]
 544:	e2833001 	add	r3, r3, #1
 548:	e5823000 	str	r3, [r2]
 54c:	e35300ef 	cmp	r3, #239	; 0xef
 550:	daffffee 	ble	510 <GreenScreen+0x3c>
		for (x = 0; x < 320; x++) {
			*(Video_Mem_ptr + (y << 9) + x) = GREEN; //make every pixel black
		}
	}	
 554:	e8bd0030 	pop	{r4, r5}
 558:	e12fff1e 	bx	lr

0000055c <main>:

/*Global var*/
int x, y;
int bW=0; //0 if not b&w or has been already inverted backward 	1 if inverted forward

int main(void) {
 55c:	e92d4038 	push	{r3, r4, r5, lr}
	while(1){
		*(Video_In_DMA_ptr + 3) = 0x4;
 560:	e3005a28 	movw	r5, #2600	; 0xa28
 564:	e3405000 	movt	r5, #0
 568:	e3a04004 	mov	r4, #4
 56c:	e5951004 	ldr	r1, [r5, #4]
		if(*(KEY_ptr) != 0){
 570:	e5952008 	ldr	r2, [r5, #8]
int x, y;
int bW=0; //0 if not b&w or has been already inverted backward 	1 if inverted forward

int main(void) {
	while(1){
		*(Video_In_DMA_ptr + 3) = 0x4;
 574:	e581400c 	str	r4, [r1, #12]
		if(*(KEY_ptr) != 0){
 578:	e5923000 	ldr	r3, [r2]
 57c:	e3530000 	cmp	r3, #0
 580:	0afffffb 	beq	574 <main+0x18>
			//whiteScreen();
			//RedScreen();
			//BlueScreen();
			GreenScreen();
 584:	ebffffd2 	bl	4d4 <GreenScreen>
 588:	eafffff7 	b	56c <main+0x10>

0000058c <atexit>:
 58c:	e1a01000 	mov	r1, r0
 590:	e3a00000 	mov	r0, #0
 594:	e92d4008 	push	{r3, lr}
 598:	e1a02000 	mov	r2, r0
 59c:	e1a03000 	mov	r3, r0
 5a0:	eb00000e 	bl	5e0 <__register_exitproc>
 5a4:	e8bd4008 	pop	{r3, lr}
 5a8:	e12fff1e 	bx	lr

000005ac <exit>:
 5ac:	e92d4008 	push	{r3, lr}
 5b0:	e3a01000 	mov	r1, #0
 5b4:	e1a04000 	mov	r4, r0
 5b8:	eb000045 	bl	6d4 <__call_exitprocs>
 5bc:	e59f3018 	ldr	r3, [pc, #24]	; 5dc <exit+0x30>
 5c0:	e5930000 	ldr	r0, [r3]
 5c4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 5c8:	e3530000 	cmp	r3, #0
 5cc:	11a0e00f 	movne	lr, pc
 5d0:	112fff13 	bxne	r3
 5d4:	e1a00004 	mov	r0, r4
 5d8:	eb0000c9 	bl	904 <_exit>
 5dc:	000009c4 	.word	0x000009c4

000005e0 <__register_exitproc>:
 5e0:	e59fc0e4 	ldr	r12, [pc, #228]	; 6cc <__register_exitproc+0xec>
 5e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 5e8:	e59c4000 	ldr	r4, [r12]
 5ec:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 5f0:	e35c0000 	cmp	r12, #0
 5f4:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 5f8:	e59c5004 	ldr	r5, [r12, #4]
 5fc:	0584c148 	streq	r12, [r4, #328]	; 0x148
 600:	e355001f 	cmp	r5, #31
 604:	e24dd010 	sub	sp, sp, #16
 608:	e1a06000 	mov	r6, r0
 60c:	da000015 	ble	668 <__register_exitproc+0x88>
 610:	e59f00b8 	ldr	r0, [pc, #184]	; 6d0 <__register_exitproc+0xf0>
 614:	e3500000 	cmp	r0, #0
 618:	1a000001 	bne	624 <__register_exitproc+0x44>
 61c:	e3e00000 	mvn	r0, #0
 620:	ea000018 	b	688 <__register_exitproc+0xa8>
 624:	e3a00e19 	mov	r0, #400	; 0x190
 628:	e58d100c 	str	r1, [sp, #12]
 62c:	e58d2008 	str	r2, [sp, #8]
 630:	e58d3004 	str	r3, [sp, #4]
 634:	e320f000 	nop	{0}
 638:	e250c000 	subs	r12, r0, #0
 63c:	e59d100c 	ldr	r1, [sp, #12]
 640:	e59d2008 	ldr	r2, [sp, #8]
 644:	e59d3004 	ldr	r3, [sp, #4]
 648:	0afffff3 	beq	61c <__register_exitproc+0x3c>
 64c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 650:	e3a00000 	mov	r0, #0
 654:	e58c0004 	str	r0, [r12, #4]
 658:	e58c5000 	str	r5, [r12]
 65c:	e584c148 	str	r12, [r4, #328]	; 0x148
 660:	e58c0188 	str	r0, [r12, #392]	; 0x188
 664:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 668:	e3560000 	cmp	r6, #0
 66c:	e59c4004 	ldr	r4, [r12, #4]
 670:	1a000007 	bne	694 <__register_exitproc+0xb4>
 674:	e2843002 	add	r3, r4, #2
 678:	e2844001 	add	r4, r4, #1
 67c:	e78c1103 	str	r1, [r12, r3, lsl #2]
 680:	e58c4004 	str	r4, [r12, #4]
 684:	e3a00000 	mov	r0, #0
 688:	e28dd010 	add	sp, sp, #16
 68c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 690:	e12fff1e 	bx	lr
 694:	e3a00001 	mov	r0, #1
 698:	e1a00410 	lsl	r0, r0, r4
 69c:	e08c8104 	add	r8, r12, r4, lsl #2
 6a0:	e3560002 	cmp	r6, #2
 6a4:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 6a8:	e5883108 	str	r3, [r8, #264]	; 0x108
 6ac:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 6b0:	e1877000 	orr	r7, r7, r0
 6b4:	01830000 	orreq	r0, r3, r0
 6b8:	e1a05008 	mov	r5, r8
 6bc:	e5882088 	str	r2, [r8, #136]	; 0x88
 6c0:	e58c7188 	str	r7, [r12, #392]	; 0x188
 6c4:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 6c8:	eaffffe9 	b	674 <__register_exitproc+0x94>
 6cc:	000009c4 	.word	0x000009c4
 6d0:	00000000 	.word	0x00000000

000006d4 <__call_exitprocs>:
 6d4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 6d8:	e59f3168 	ldr	r3, [pc, #360]	; 848 <__call_exitprocs+0x174>
 6dc:	e5933000 	ldr	r3, [r3]
 6e0:	e24dd014 	sub	sp, sp, #20
 6e4:	e58d3004 	str	r3, [sp, #4]
 6e8:	e2833f52 	add	r3, r3, #328	; 0x148
 6ec:	e58d0008 	str	r0, [sp, #8]
 6f0:	e58d300c 	str	r3, [sp, #12]
 6f4:	e1a07001 	mov	r7, r1
 6f8:	e3a08001 	mov	r8, #1
 6fc:	e59d3004 	ldr	r3, [sp, #4]
 700:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 704:	e3560000 	cmp	r6, #0
 708:	e59db00c 	ldr	r11, [sp, #12]
 70c:	0a000033 	beq	7e0 <__call_exitprocs+0x10c>
 710:	e5965004 	ldr	r5, [r6, #4]
 714:	e2554001 	subs	r4, r5, #1
 718:	5286a088 	addpl	r10, r6, #136	; 0x88
 71c:	5285501f 	addpl	r5, r5, #31
 720:	508a5105 	addpl	r5, r10, r5, lsl #2
 724:	5a000007 	bpl	748 <__call_exitprocs+0x74>
 728:	ea000029 	b	7d4 <__call_exitprocs+0x100>
 72c:	e5953000 	ldr	r3, [r5]
 730:	e1530007 	cmp	r3, r7
 734:	0a000005 	beq	750 <__call_exitprocs+0x7c>
 738:	e2444001 	sub	r4, r4, #1
 73c:	e3740001 	cmn	r4, #1
 740:	e2455004 	sub	r5, r5, #4
 744:	0a000022 	beq	7d4 <__call_exitprocs+0x100>
 748:	e3570000 	cmp	r7, #0
 74c:	1afffff6 	bne	72c <__call_exitprocs+0x58>
 750:	e5963004 	ldr	r3, [r6, #4]
 754:	e06a2005 	rsb	r2, r10, r5
 758:	e2433001 	sub	r3, r3, #1
 75c:	e0862002 	add	r2, r6, r2
 760:	e1530004 	cmp	r3, r4
 764:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 768:	13a01000 	movne	r1, #0
 76c:	05864004 	streq	r4, [r6, #4]
 770:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 774:	e3530000 	cmp	r3, #0
 778:	0affffee 	beq	738 <__call_exitprocs+0x64>
 77c:	e1a02418 	lsl	r2, r8, r4
 780:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 784:	e1120001 	tst	r2, r1
 788:	e5969004 	ldr	r9, [r6, #4]
 78c:	0a000016 	beq	7ec <__call_exitprocs+0x118>
 790:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 794:	e1120001 	tst	r2, r1
 798:	1a000016 	bne	7f8 <__call_exitprocs+0x124>
 79c:	e59d0008 	ldr	r0, [sp, #8]
 7a0:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 7a4:	e1a0e00f 	mov	lr, pc
 7a8:	e12fff13 	bx	r3
 7ac:	e5963004 	ldr	r3, [r6, #4]
 7b0:	e1530009 	cmp	r3, r9
 7b4:	1affffd0 	bne	6fc <__call_exitprocs+0x28>
 7b8:	e59b3000 	ldr	r3, [r11]
 7bc:	e1530006 	cmp	r3, r6
 7c0:	1affffcd 	bne	6fc <__call_exitprocs+0x28>
 7c4:	e2444001 	sub	r4, r4, #1
 7c8:	e3740001 	cmn	r4, #1
 7cc:	e2455004 	sub	r5, r5, #4
 7d0:	1affffdc 	bne	748 <__call_exitprocs+0x74>
 7d4:	e59f1070 	ldr	r1, [pc, #112]	; 84c <__call_exitprocs+0x178>
 7d8:	e3510000 	cmp	r1, #0
 7dc:	1a000009 	bne	808 <__call_exitprocs+0x134>
 7e0:	e28dd014 	add	sp, sp, #20
 7e4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 7e8:	e12fff1e 	bx	lr
 7ec:	e1a0e00f 	mov	lr, pc
 7f0:	e12fff13 	bx	r3
 7f4:	eaffffec 	b	7ac <__call_exitprocs+0xd8>
 7f8:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 7fc:	e1a0e00f 	mov	lr, pc
 800:	e12fff13 	bx	r3
 804:	eaffffe8 	b	7ac <__call_exitprocs+0xd8>
 808:	e5963004 	ldr	r3, [r6, #4]
 80c:	e3530000 	cmp	r3, #0
 810:	e5963000 	ldr	r3, [r6]
 814:	1a000008 	bne	83c <__call_exitprocs+0x168>
 818:	e3530000 	cmp	r3, #0
 81c:	0a000006 	beq	83c <__call_exitprocs+0x168>
 820:	e1a00006 	mov	r0, r6
 824:	e58b3000 	str	r3, [r11]
 828:	e320f000 	nop	{0}
 82c:	e59b6000 	ldr	r6, [r11]
 830:	e3560000 	cmp	r6, #0
 834:	1affffb5 	bne	710 <__call_exitprocs+0x3c>
 838:	eaffffe8 	b	7e0 <__call_exitprocs+0x10c>
 83c:	e1a0b006 	mov	r11, r6
 840:	e1a06003 	mov	r6, r3
 844:	eafffff9 	b	830 <__call_exitprocs+0x15c>
 848:	000009c4 	.word	0x000009c4
 84c:	00000000 	.word	0x00000000

00000850 <register_fini>:
 850:	e92d4008 	push	{r3, lr}
 854:	e59f3010 	ldr	r3, [pc, #16]	; 86c <register_fini+0x1c>
 858:	e3530000 	cmp	r3, #0
 85c:	159f000c 	ldrne	r0, [pc, #12]	; 870 <register_fini+0x20>
 860:	1bffff49 	blne	58c <atexit>
 864:	e8bd4008 	pop	{r3, lr}
 868:	e12fff1e 	bx	lr
 86c:	000009ec 	.word	0x000009ec
 870:	00000874 	.word	0x00000874

00000874 <__libc_fini_array>:
 874:	e92d4038 	push	{r3, r4, r5, lr}
 878:	e59f5030 	ldr	r5, [pc, #48]	; 8b0 <__libc_fini_array+0x3c>
 87c:	e59f4030 	ldr	r4, [pc, #48]	; 8b4 <__libc_fini_array+0x40>
 880:	e0654004 	rsb	r4, r5, r4
 884:	e1b04144 	asrs	r4, r4, #2
 888:	10855104 	addne	r5, r5, r4, lsl #2
 88c:	0a000004 	beq	8a4 <__libc_fini_array+0x30>
 890:	e5353004 	ldr	r3, [r5, #-4]!
 894:	e1a0e00f 	mov	lr, pc
 898:	e12fff13 	bx	r3
 89c:	e2544001 	subs	r4, r4, #1
 8a0:	1afffffa 	bne	890 <__libc_fini_array+0x1c>
 8a4:	eb000050 	bl	9ec <__libc_fini>
 8a8:	e8bd4038 	pop	{r3, r4, r5, lr}
 8ac:	e12fff1e 	bx	lr
 8b0:	00000a04 	.word	0x00000a04
 8b4:	00000a08 	.word	0x00000a08

000008b8 <__cs3_premain>:
 8b8:	e92d4008 	push	{r3, lr}
 8bc:	eb00001d 	bl	938 <__libc_init_array>
 8c0:	e59f3030 	ldr	r3, [pc, #48]	; 8f8 <__cs3_premain+0x40>
 8c4:	e3530000 	cmp	r3, #0
 8c8:	15930000 	ldrne	r0, [r3]
 8cc:	01a00003 	moveq	r0, r3
 8d0:	e59f3024 	ldr	r3, [pc, #36]	; 8fc <__cs3_premain+0x44>
 8d4:	e3530000 	cmp	r3, #0
 8d8:	15931000 	ldrne	r1, [r3]
 8dc:	01a01003 	moveq	r1, r3
 8e0:	e3a02000 	mov	r2, #0
 8e4:	ebffff1c 	bl	55c <main>
 8e8:	e59f3010 	ldr	r3, [pc, #16]	; 900 <__cs3_premain+0x48>
 8ec:	e3530000 	cmp	r3, #0
 8f0:	1bffff2d 	blne	5ac <exit>
 8f4:	eafffffe 	b	8f4 <__cs3_premain+0x3c>
	...
 900:	000005ac 	.word	0x000005ac

00000904 <_exit>:
 904:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 908:	e3a00018 	mov	r0, #24
 90c:	e59f1004 	ldr	r1, [pc, #4]	; 918 <_exit+0x14>
 910:	ef123456 	svc	0x00123456
 914:	eafffffe 	b	914 <_exit+0x10>
 918:	00020026 	.word	0x00020026

0000091c <__cs3_isr_interrupt>:
 91c:	eafffffe 	b	91c <__cs3_isr_interrupt>

00000920 <__cs3_isr_undef>:
 920:	eafffffe 	b	920 <__cs3_isr_undef>

00000924 <__cs3_isr_swi>:
 924:	eafffffe 	b	924 <__cs3_isr_swi>

00000928 <__cs3_isr_pabort>:
 928:	eafffffe 	b	928 <__cs3_isr_pabort>

0000092c <__cs3_isr_dabort>:
 92c:	eafffffe 	b	92c <__cs3_isr_dabort>

00000930 <__cs3_isr_irq>:
 930:	eafffffe 	b	930 <__cs3_isr_irq>

00000934 <__cs3_isr_fiq>:
 934:	eafffffe 	b	934 <__cs3_isr_fiq>

00000938 <__libc_init_array>:
 938:	e92d4070 	push	{r4, r5, r6, lr}
 93c:	e59f506c 	ldr	r5, [pc, #108]	; 9b0 <__libc_init_array+0x78>
 940:	e59f606c 	ldr	r6, [pc, #108]	; 9b4 <__libc_init_array+0x7c>
 944:	e0656006 	rsb	r6, r5, r6
 948:	e1b06146 	asrs	r6, r6, #2
 94c:	12455004 	subne	r5, r5, #4
 950:	13a04000 	movne	r4, #0
 954:	0a000005 	beq	970 <__libc_init_array+0x38>
 958:	e5b53004 	ldr	r3, [r5, #4]!
 95c:	e2844001 	add	r4, r4, #1
 960:	e1a0e00f 	mov	lr, pc
 964:	e12fff13 	bx	r3
 968:	e1560004 	cmp	r6, r4
 96c:	1afffff9 	bne	958 <__libc_init_array+0x20>
 970:	e59f5040 	ldr	r5, [pc, #64]	; 9b8 <__libc_init_array+0x80>
 974:	e59f6040 	ldr	r6, [pc, #64]	; 9bc <__libc_init_array+0x84>
 978:	e0656006 	rsb	r6, r5, r6
 97c:	eb000012 	bl	9cc <_init>
 980:	e1b06146 	asrs	r6, r6, #2
 984:	12455004 	subne	r5, r5, #4
 988:	13a04000 	movne	r4, #0
 98c:	0a000005 	beq	9a8 <__libc_init_array+0x70>
 990:	e5b53004 	ldr	r3, [r5, #4]!
 994:	e2844001 	add	r4, r4, #1
 998:	e1a0e00f 	mov	lr, pc
 99c:	e12fff13 	bx	r3
 9a0:	e1560004 	cmp	r6, r4
 9a4:	1afffff9 	bne	990 <__libc_init_array+0x58>
 9a8:	e8bd4070 	pop	{r4, r5, r6, lr}
 9ac:	e12fff1e 	bx	lr
 9b0:	000009e4 	.word	0x000009e4
 9b4:	000009e4 	.word	0x000009e4
 9b8:	000009e4 	.word	0x000009e4
 9bc:	000009ec 	.word	0x000009ec

Disassembly of section .rodata:

000009c4 <_global_impure_ptr>:
 9c4:	00000a40 00000043                       @...C...

000009cc <_init>:
 9cc:	e1a0c00d 	mov	r12, sp
 9d0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 9d4:	e24cb004 	sub	r11, r12, #4
 9d8:	e24bd028 	sub	sp, r11, #40	; 0x28
 9dc:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 9e0:	e12fff1e 	bx	lr

000009e4 <__init_array_start>:
 9e4:	00000850 	.word	0x00000850

000009e8 <__frame_dummy_init_array_entry>:
 9e8:	00000208                                ....

000009ec <__libc_fini>:
 9ec:	e1a0c00d 	mov	r12, sp
 9f0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 9f4:	e24cb004 	sub	r11, r12, #4
 9f8:	e24bd028 	sub	sp, r11, #40	; 0x28
 9fc:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 a00:	e12fff1e 	bx	lr

00000a04 <__fini_array_start>:
 a04:	000001c4 	.word	0x000001c4

00000a08 <__cs3_regions>:
	...
 a14:	00000e70 	.word	0x00000e70
 a18:	00000028 	.word	0x00000028

00000a1c <__cs3_regions_end>:
 a1c:	00000000 	.word	0x00000000
